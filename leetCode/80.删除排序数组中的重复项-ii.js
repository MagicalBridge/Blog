/*
 * @lc app=leetcode.cn id=80 lang=javascript
 *
 * [80] 删除排序数组中的重复项 II
 *
 * https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/description/
 *
 * algorithms
 * Medium (49.08%)
 * Total Accepted:    26.5K
 * Total Submissions: 49.8K
 * Testcase Example:  '[1,1,1,2,2,3]'
 *
 * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。
 * 
 * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
 * 
 * 示例 1:
 * 
 * 给定 nums = [1,1,1,2,2,3],
 * 
 * 函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。
 * 
 * 你不需要考虑数组中超出新长度后面的元素。
 * 
 * 示例 2:
 * 
 * 给定 nums = [0,0,1,1,1,1,2,3,3],
 * 
 * 函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。
 * 
 * 你不需要考虑数组中超出新长度后面的元素。
 * 
 * 
 * 说明:
 * 
 * 为什么返回数值是整数，但输出的答案是数组呢?
 * 
 * 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
 * 
 * 你可以想象内部操作如下:
 * 
 * // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
 * int len = removeDuplicates(nums);
 * 
 * // 在函数里修改输入数组对于调用者是可见的。
 * // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
 * for (int i = 0; i < len; i++) {
 * print(nums[i]);
 * }
 * 因为 这个和26题差不多，只是条件改变了, 
  从不允许 有重复项变成了 最多出现两次。可以使用一个变量cnt来记录还允许有几次重复，
  cnt 初始化为 1, 如果出现过一次重复项则cnt 减一，下次再出现重复的项，快指针直接前进
  一步，如果这个时候不是重复的，则cnt 恢复 1，由于整个数组是有序的，所以一旦出现不重复的数字。

  原地删除肯定是双指针，一个指向遍历的元素，一个指向可以写入的位置，后者的大小是小于等于前者的，关键是
  在于题目条件的转化，如何实现限制最多两次的重复出现。

  我们先不考虑边界情况，只考虑中间情况，假设遍历的位置为i 写指针的可写入位置为 current+1 对于 i 
  所谓的额算法和语言到底有多大的关系呢？ 我感觉真的关系并不是很大。 

  

 */
/**
 * @param {number[]} nums
 * @return {number}
 */
var removeDuplicates = function (nums) {

};

