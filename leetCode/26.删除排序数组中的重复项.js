/*
 * @lc app=leetcode.cn id=26 lang=javascript
 *
 * [26] 删除排序数组中的重复项
 *
 * https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/
 *
 * algorithms
 * Easy (43.98%)
 * Total Accepted:    154.7K
 * Total Submissions: 336.7K
 * Testcase Example:  '[1,1,2]'
 *
 * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
 * 
 * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
 * 
 * 示例 1:
 * 
 * 给定数组 nums = [1,1,2], 
 * 
 * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 
 * 
 * 你不需要考虑数组中超出新长度后面的元素。
 * 
 * 示例 2:
 * 
 * 给定 nums = [0,0,1,1,1,2,2,3,3,4],
 * 
 * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
 * 
 * 你不需要考虑数组中超出新长度后面的元素。
 * 
 * 
 * 说明:
 * 
 * 为什么返回数值是整数，但输出的答案是数组呢?
 * 
 * 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
 * 
 * 你可以想象内部操作如下:
 * 
 * // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
 * int len = removeDuplicates(nums);
 * 
 * // 在函数里修改输入数组对于调用者是可见的。
 * // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
 * for (int i = 0; i < len; i++) {
 * print(nums[i]);
 * }
 * 
 * 
 */
/**
 * @param {number[]} nums
 * @return {number}
 */
// 这道题目要我们从有序数组中去除重复项，和之前的那一道 Remove Duplicates from Sorted List 移除有序链表中的重复项
// 很是类似，但是要比那一道题目简单一些，因为毕竟数组的值可以通过下标进行访问，而链表不行，那么这道题目的解题思路是使用快慢指针
// 来记录遍历的坐标,最开始时候两个指针都指向第一个数字，如果两个指针指的数字相同，则快指针向前走一步，如果不同，则两个指针都向前
// 走一步,这样当快指针走完整个数组之后，慢指针当前的坐标加上1就是数组中不同数字的个数代码如下


// leetcode 中真的是各种问题，这道题目典型的快慢指针的思路，其实很需要总一下 27题使用是单指针的思路 26题目使用的双指针的思路
// 最开始的时候两个指针都指向第一个数字，如果两个指针指的数字相同，则快指针向前走一步，如果不同则两个指针都向前走一步，这样当快
// 指针走完整个数组之后，慢指针当前的坐标加上1
var removeDuplicates = function (nums) {
  if (nums === undefined || nums.length === 0) {
    return null
  }

  let i = 0;
  for (let j = 1; j < nums.length; j++) {
    if(nums[j] !== nums[i]){ // 已经跳过了重复项数据
      i++
      nums[i] = nums[j]
    }
  }
  return i+1
};

